{"version":3,"sources":["serviceWorker.js","components/Navigation/Nav.js","components/Table/TableHeader.js","components/Table/TableBody.js","components/Table/Table.js","components/Alert/Alert.js","components/Form/Form.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","className","href","style","width","src","id","React","Component","NavItems","props","TableHeader","scope","TableBody","usersInfo","userData","map","user","index","key","name","email","contact","days","type","class","onClick","removeUser","Table","this","Alert","status","data-dismiss","closeAlert","Form","submitForm","handleSubmit","state","setState","initialState","handleChangeName","bind","handleChangeEmail","handleChangeContact","handleChangeDays","e","target","value","for","placeholder","onChange","required","App","removerUser","users","filter","i","alert","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"maAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gBCfAC,E,iLAQE,OACI,yBAAKC,UAAU,+CACX,uBAAGA,UAAU,eAAeC,KAAK,KAAI,yBAAKC,MANlC,CACZC,MAAO,OAKuDH,UAAU,qBAAqBI,IAAI,uDAC7F,yBAAKJ,UAAU,2BAA2BK,GAAG,iBAC7C,kBAAC,EAAD,Y,GAZKC,IAAMC,WAmBrBC,EAAW,SAAAC,GACb,OACI,wBAAIT,UAAU,sBACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,wBAAsD,0BAAMD,UAAU,WAAhB,eAE1D,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,iBAMDF,IClBAW,G,MAfK,SAAAD,GAChB,OACI,2BAAOT,UAAU,cACb,4BACI,wBAAIW,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,eCSDC,EAlBG,SAAAH,GAEd,IAAMI,EAAYJ,EAAMK,SAASC,KAAI,SAACC,EAAMC,GACxC,OACI,wBAAIC,IAAKD,GACL,4BAAKA,EAAQ,GACb,4BAAKD,EAAKG,MACV,4BAAKH,EAAKI,OACV,4BAAKJ,EAAKK,SACV,4BAAKL,EAAKM,MACV,4BAAI,4BAAQC,KAAK,SAASC,MAAM,iBAAiBC,QAAS,kBAAMhB,EAAMiB,WAAWT,KAA7E,eAKpB,OAAO,+BAAQJ,ICAEc,E,iLATX,OACE,2BAAO3B,UAAU,wBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWc,SAAUc,KAAKnB,MAAMK,SAAUY,WAAYE,KAAKnB,MAAMiB,kB,GALzDpB,IAAMC,WCaXsB,G,MAhBD,SAAApB,GACV,OAAmB,GAAhBA,EAAMqB,QAEG,yBAAKN,MAAM,8DACP,4BAAQD,KAAK,SAASC,MAAM,QAAQO,eAAa,QAAQN,QAAShB,EAAMuB,YAAxE,QACA,8CAFJ,0BAEsD,uBAAG/B,KAAK,IAAIuB,MAAM,cAAlB,gCAFtD,OC6FDS,G,kBA9FX,WAAYxB,GAAO,IAAD,8BAGd,4CAAMA,KA8CVyB,WAAa,WACT,EAAKzB,MAAM0B,aAAa,EAAKC,OAC7B,EAAKC,SAAS,CACVlB,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,KAAK,MAlDT,EAAKgB,aAAe,GAIpB,EAAKF,MAAQ,CACTjB,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,KAAM,IAGV,EAAKiB,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,oBAAsB,EAAKA,oBAAoBF,KAAzB,gBAC3B,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKN,WAAa,EAAKA,WAAWM,KAAhB,gBApBJ,E,8EAyBDI,GACbhB,KAAKS,SAAS,CACVlB,KAAMyB,EAAEC,OAAOC,U,wCAILF,GACdhB,KAAKS,SAAS,CACVjB,MAAOwB,EAAEC,OAAOC,U,0CAIJF,GAChBhB,KAAKS,SAAS,CACVhB,QAASuB,EAAEC,OAAOC,U,uCAITF,GACbhB,KAAKS,SAAS,CACVf,KAAMsB,EAAEC,OAAOC,U,+BAgBd,IAAD,EAEmClB,KAAKQ,MAApCjB,EAFJ,EAEIA,KAAMC,EAFV,EAEUA,MAAOC,EAFjB,EAEiBA,QAASC,EAF1B,EAE0BA,KAE9B,OACI,8BACI,yBAAKE,MAAM,cACP,2BAAOuB,IAAI,QAAX,cACA,2BAAOxB,KAAK,OAAOC,MAAM,eAAenB,GAAG,UAAU2C,YAAY,GAAGF,MAAO3B,EAAM8B,SAAUrB,KAAKW,iBAAkBW,UAAQ,IACzH,2BAAO7C,GAAG,WAAWmB,MAAM,wBAAwBL,IAEvD,yBAAKK,MAAM,cACR,2BAAOuB,IAAI,QAAX,kBACA,2BAAOxB,KAAK,OAAOC,MAAM,eAAenB,GAAG,UAAU2C,YAAY,GAAGF,MAAO1B,EAAO6B,SAAUrB,KAAKa,kBAAmBS,UAAQ,IAC5H,2BAAO7C,GAAG,WAAWmB,MAAM,wBAAwBJ,IAEvD,yBAAKI,MAAM,cACP,2BAAOuB,IAAI,QAAX,oBACA,2BAAOxB,KAAK,OAAOC,MAAM,eAAenB,GAAG,UAAU2C,YAAY,GAAGF,MAAOzB,EAAS4B,SAAUrB,KAAKc,oBAAqBQ,UAAQ,IAChI,2BAAO7C,GAAG,WAAWmB,MAAM,wBAAwBH,IAEvD,yBAAKG,MAAM,cACP,2BAAOuB,IAAI,QAAX,QACA,2BAAOxB,KAAK,OAAOC,MAAM,eAAenB,GAAG,UAAU2C,YAAY,GAAGF,MAAOxB,EAAM2B,SAAUrB,KAAKe,iBAAkBO,UAAQ,IAC1H,2BAAO7C,GAAG,WAAWmB,MAAM,wBAAwBF,IAEvD,4BAAQC,KAAK,SAASC,MAAM,kBAAkBC,QAASG,KAAKM,YAA5D,e,GAzFG5B,IAAMC,YCQnB4C,E,YAEF,WAAY1C,GAAO,IAAD,8BACd,4CAAMA,KAqBV2C,YAAc,SAAAnC,GACV,EAAKoB,SAAS,CACZgB,MAAO,EAAKjB,MAAMiB,MAAMC,QAAO,SAACtC,EAAMuC,GACpC,OAAOA,IAAMtC,QAzBH,EA8BhBkB,aAAe,SAAAnB,GACb,EAAKqB,SAAS,CACVgB,MAAM,GAAD,mBAAM,EAAKjB,MAAMiB,OAAjB,CAAwBrC,IAC7BwC,OAAO,KA7BX,EAAKpB,MAAQ,CACToB,OAAO,EACPH,MAAO,IAIX,EAAKrB,WAAa,EAAKA,WAAWQ,KAAhB,gBAClB,EAAKY,YAAc,EAAKA,YAAYZ,KAAjB,gBACnB,EAAKL,aAAe,EAAKA,aAAaK,KAAlB,gBAZN,E,0EAiBdZ,KAAKS,SAAS,CACVmB,OAAO,M,+BAuBX,OACI,yBAAKxD,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAO8B,OAAQF,KAAKQ,MAAMoB,MAAOxB,WAAYJ,KAAKI,aAClD,yBAAKhC,UAAU,aACX,yBAAKA,UAAU,YACV,yBAAKA,UAAU,SACZ,kBAAC,EAAD,CAAMmC,aAAcP,KAAKO,iBAGjC,yBAAKnC,UAAU,OACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAOc,SAAUc,KAAKQ,MAAMiB,MAAO3B,WAAYE,KAAKwB,sB,GAvD9D9C,IAAMC,WAmExBkD,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SPqD1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53109c6e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './Nav.css'\n\nclass NavBar extends React.Component {\n\n    render(){\n\n        const navLogo = {\n            width: '50%'\n        }\n\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <a className=\"navbar-brand\" href=\"#\"><img style={navLogo} className=\"logo img-respnsive\" src=\"https://www.leaguedigital.com/img/league/logo.png\"/></a>\n                <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\n                <NavItems/>\n                </div>\n            </nav>\n        )\n    }\n}\n\nconst NavItems = props => {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"#\">Technical Assessment <span className=\"sr-only\">(current)</span></a>\n            </li>\n            <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">Components</a>\n            </li>\n        </ul>\n    )\n}\n\nexport default NavBar;\n","import React from 'react';\n\nconst TableHeader = props => {\n    return (\n        <thead className=\"thead-dark\">\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email Address</th>\n                <th scope=\"col\">Phone Number</th>\n                <th scope=\"col\">Total days</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n        </thead>\n    )\n}\n\nexport default TableHeader;","import React from 'react';\n\nconst TableBody = props => {\n\n    const usersInfo = props.userData.map((user, index) => {\n        return (\n            <tr key={index}>\n                <td>{index + 1}</td>\n                <td>{user.name}</td>\n                <td>{user.email}</td>\n                <td>{user.contact}</td>\n                <td>{user.days}</td>\n                <td><button type=\"button\" class=\"btn btn-danger\" onClick={() => props.removeUser(index)}>Remove</button></td>\n            </tr>\n        )\n    })\n\nreturn <tbody>{usersInfo}</tbody>\n}\n\nexport default TableBody;","import React from 'react';\nimport './Table.css';\nimport TableHeader from './TableHeader'\nimport TableBody from './TableBody'\n\n\nclass Table extends React.Component {\n    render() {\n      return (\n        <table className=\"table table-bordered\">\n            <TableHeader/>\n            <TableBody userData={this.props.userData} removeUser={this.props.removeUser}/>\n        </table> \n      )\n    }\n  }\n  \n  export default Table;","import React from 'react';\nimport './Alert.css'\n\nconst Alert = props => {\n    if(props.status == true){\n        return (\n                <div class=\"alert alert-dismissible alert-success animated slideInDown\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" onClick={props.closeAlert}>&times;</button>\n                    <strong>Well done!</strong> You successfully read <a href=\"#\" class=\"alert-link\">this important alert message</a>.\n                </div>\n        )\n    } \n\n    else {\n        return false;\n    }\n   \n}\n\nexport default Alert;","import React from 'react';\nimport './Form.css'\n\nclass Form extends React.Component {\n\n    constructor(props){\n\n\n        super(props);\n\n        this.initialState = {\n\n        }\n\n        this.state = {\n            name: '',\n            email: '',\n            contact: '',\n            days: ''\n        }\n\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleChangeEmail = this.handleChangeEmail.bind(this);\n        this.handleChangeContact = this.handleChangeContact.bind(this);\n        this.handleChangeDays = this.handleChangeDays.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n\n        \n    }\n\n    handleChangeName(e){\n        this.setState({\n            name: e.target.value\n        })\n    }\n\n    handleChangeEmail(e){\n        this.setState({\n            email: e.target.value\n        })\n    }\n\n    handleChangeContact(e){\n        this.setState({\n            contact: e.target.value\n        })\n    }\n\n    handleChangeDays(e){\n        this.setState({\n            days: e.target.value\n        })\n    }\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state);\n        this.setState({\n            name: '',\n            email: '',\n            contact: '',\n            days:''\n        })\n\n    }\n    \n\n    render(){\n       \n        const { name, email, contact, days } = this.state;\n\n        return (\n            <form>\n                <div class=\"form-group\">\n                    <label for=\"Name\">Full name:</label>\n                    <input type=\"text\" class=\"form-control\" id=\"txtName\" placeholder=\"\" value={name} onChange={this.handleChangeName} required/>\n                     <small id=\"textHelp\" class=\"form-text text-muted\">{name}</small>\n                </div>\n                 <div class=\"form-group\">\n                    <label for=\"Name\">Email address:</label>\n                    <input type=\"text\" class=\"form-control\" id=\"txtName\" placeholder=\"\" value={email} onChange={this.handleChangeEmail} required/>\n                    <small id=\"textHelp\" class=\"form-text text-muted\">{email}</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"Name\">Contact details:</label>\n                    <input type=\"text\" class=\"form-control\" id=\"txtName\" placeholder=\"\" value={contact} onChange={this.handleChangeContact} required/>\n                    <small id=\"textHelp\" class=\"form-text text-muted\">{contact}</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"Name\">Days</label>\n                    <input type=\"text\" class=\"form-control\" id=\"txtName\" placeholder=\"\" value={days} onChange={this.handleChangeDays} required/>\n                    <small id=\"textHelp\" class=\"form-text text-muted\">{days}</small>\n                </div>\n                <button type=\"button\" class=\"btn btn-success\" onClick={this.submitForm}>Submit</button>\n            </form>\n        )\n    }\n    \n}\n\nexport default Form;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/custom-bootstrap/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\nimport './assets/animate.css'\nimport NavBar from './components/Navigation/Nav'\nimport Table from './components/Table/Table'\nimport Alert from './components/Alert/Alert'\nimport Form from './components/Form/Form'\n\nclass App extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        // State is managed here\n        this.state = {\n            alert: false,\n            users: []\n        }\n\n        //Functions binded in the constructor\n        this.closeAlert = this.closeAlert.bind(this);\n        this.removerUser = this.removerUser.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    // Defined functions\n    closeAlert(){\n        this.setState({\n            alert: false\n        })\n    }\n\n    removerUser = index => {\n        this.setState({\n          users: this.state.users.filter((user, i) => {\n            return i !== index;\n          }),\n        })\n      }\n\n      handleSubmit = user => {\n        this.setState({ \n            users: [...this.state.users, user],\n            alert: true\n\n        })\n      }\n    \n\n    render(){\n\n        return (\n            <div className=\"App\">\n                <NavBar/>\n                <Alert status={this.state.alert} closeAlert={this.closeAlert}/>\n                <div className=\"container\">\n                    <div className=\"row pt-5\">\n                         <div className=\"col-6\">\n                            <Form handleSubmit={this.handleSubmit}/>\n                         </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <Table userData={this.state.users} removeUser={this.removerUser}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n}\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}